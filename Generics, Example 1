import java.awt.*;
import java.util.*;
import javax.swing.*;

public class Main
{
    public static void main(String[] args)
    {
        Integer[] intArray = {1, 2, 3, 4, 5};
        Double[] doubleArray = {1.0, 2.0, 3.0, 4.0, 5.0};
        Character[] charray = {'H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!'};
        String[] stringArray = {"Bye", " ", "world!"};
        
       displayArray(intArray);
       displayArray(doubleArray);
       displayArray(charray);
       displayArray(stringArray);
        System.out.println();
       //The less efficient way of using functionally identical overloads above...

        oneSizeFitsAll(intArray);
        oneSizeFitsAll(doubleArray);
        oneSizeFitsAll(charray);
        oneSizeFitsAll(stringArray);
        System.out.println();
        //Look how efficient this one is- only needs me to make ONE method!
        //Makes me think of templates from C++. Hope I'm at least partially right...
        
        System.out.println(getFirst(intArray));
        System.out.println(getFirst(doubleArray));
        System.out.println(getFirst(charray));
        System.out.println(getFirst(stringArray));
    }
    public static void displayArray(Integer[] array)
    {
        for(Integer a:array)
        {
            System.out.print(a+" ");
        }
        System.out.println(" ");
    }
    public static void displayArray(Double[] array)
    {
        for(Double a:array)
        {
            System.out.print(a+" ");
        }
        System.out.println(" ");
    }

    public static void displayArray(Character[] array)
    {
        for(Character a:array)
        {
            System.out.print(a+" ");
        }
        System.out.println(" ");
    }

    public static void displayArray(String[] array)
    {
        for(String a:array)
        {
            System.out.print(a+" ");
        }
        System.out.println(" ");
    }
    //Above, good ol' overloading...
    //Below, witness the power of generics!!!!
    public static <Ting> void oneSizeFitsAll(Ting[] array)
    {
        for (Ting a : array)
        {
            System.out.print(a + " ");
        }
        System.out.println();
    }

    public static <T> T getFirst(T[] array)
    {
        return array[0];
    }
}
