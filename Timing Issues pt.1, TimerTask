import java.awt.*;
import java.util.*;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.*;

public class Main
{
    public static void main(String[] args)
    {
        Timer timer1= new Timer();
        TimerTask task2= new TimerTask()
        {
            int counter=100;
            @Override
            public void run()
            {
                if(counter>0)
                {
                    System.out.println(counter+" seconds left");
                    counter--;
                }
                else
                {
                    System.out.println("Finished innit?");
                    timer1.cancel();
                }
            }
        };

        Calendar date1= Calendar.getInstance();
        date1.set(Calendar.YEAR,2023);
        date1.set(Calendar.MONTH,Calendar.AUGUST);
        date1.set(Calendar.DAY_OF_MONTH,25);
        date1.set(Calendar.HOUR_OF_DAY,2);
        date1.set(Calendar.MINUTE,9);
        date1.set(Calendar.SECOND,0);
        date1.set(Calendar.MILLISECOND,0);
        /*
        All the stuff above lets you set the exact time at which a given block of code
        (in this case within the TimerTask anonymous inner class) executes, down to the millisecond!!
        Quite time consuming to write out, but worth watching the cool effects.
         */

        //timer1.schedule(task2, date1.getTime());
        //Now this adds the TimerTask we worked so hard on to the Timer object we made earlier.
        //timer1.scheduleAtFixedRate(task2,0,1000);
        timer1.scheduleAtFixedRate(task2, date1.getTime(),100);
    }
}
