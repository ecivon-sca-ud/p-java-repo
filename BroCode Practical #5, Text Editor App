//Text Editor ‘App’
//For Main.java
public class Main
{
    public static void main(String[] args)
    {
        new TextEditor();
    }
}


// For TextEditor.java
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class TextEditor extends JFrame implements ActionListener
{
    JTextArea textArea;
    JScrollPane scrollPane1;
    JSpinner fontSizeSpinner;
    JLabel fontLabel1;
    JButton fontColorButton;
    JComboBox choiceOfFont;
    JMenuBar menuBar;
    JMenu fileMenu;
    JMenuItem openItem;
    JMenuItem saveItem;
    JMenuItem exitItem;

    TextEditor()
    {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle("Timo's fake MS Word lol");
        this.setLayout(new FlowLayout());
        this.setSize(600,600);
        //this.setLocationRelativeTo(null);
        //Seems to centre your JFrame.
        textArea = new JTextArea();
        //textArea.setPreferredSize(new Dimension(400,400));
        //Does the absolute basic functionality- gives user a place to type.
        textArea.setLineWrap(true);
        //Prevents characters from being typed past the bounds by bringing cursor to next line.
        textArea.setWrapStyleWord(true);
        //Similar goal, but difference(s) to be observed later.
        textArea.setFont(new Font("Comic Sans",Font.PLAIN,20));

        scrollPane1= new JScrollPane(textArea);
        scrollPane1.setPreferredSize(new Dimension(400,400));
        scrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        fontLabel1= new JLabel("Font: ");

        fontSizeSpinner = new JSpinner();
        fontSizeSpinner.setPreferredSize(new Dimension(50,25));
        fontSizeSpinner.setValue(20);
        fontSizeSpinner.addChangeListener
                (new ChangeListener()
        {
            @Override
            public void stateChanged(ChangeEvent e)
            {
                textArea.setFont(new Font(textArea.getFont().getFamily(),Font.PLAIN,(int) fontSizeSpinner.getValue()));

            }
        }
                );

        fontColorButton= new JButton("Change Text Color");
        fontColorButton.addActionListener(this);


        String[] fonts= GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();

        choiceOfFont= new JComboBox(fonts);
        choiceOfFont.addActionListener(this);
        choiceOfFont.setSelectedItem("Comic Sans");

        //Here's the menubar...
        menuBar= new JMenuBar();
        fileMenu= new JMenu("File");
        openItem= new JMenuItem("Open");
        saveItem= new JMenuItem("Save");
        exitItem= new JMenuItem("Exit");

        openItem.addActionListener(this);
        saveItem.addActionListener(this);
        exitItem.addActionListener(this);

        fileMenu.add(openItem);
        fileMenu.add(saveItem);
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);


        //...end of menubar.


        this.setJMenuBar(menuBar);
        this.add(fontLabel1);
        this.add(fontSizeSpinner);
        this.add(fontColorButton);
        this.add(choiceOfFont);
        this.add(scrollPane1);
        this.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e)
    {
        if(e.getSource()==fontColorButton)
        {
            JColorChooser colorChooser1= new JColorChooser();
            Color colorChosen= colorChooser1.showDialog(null,"Pick a clor for your text",Color.BLACK);
            textArea.setForeground(colorChosen);
        }
        if(e.getSource()==choiceOfFont)
        {
            textArea.setFont(new Font((String) choiceOfFont.getSelectedItem(),Font.PLAIN,textArea.getFont().getSize()));
        }

        if(e.getSource()==openItem)
        {
            JFileChooser filechoix= new JFileChooser();
            filechoix.setCurrentDirectory(new File("."));
            FileNameExtensionFilter filter= new FileNameExtensionFilter("Text Files","txt");
            filechoix.setFileFilter(filter);
            int response= filechoix.showOpenDialog(null);
            if(response==JFileChooser.APPROVE_OPTION)
            {
                File file;
                Scanner fileIn=null;
                file= new File(filechoix.getSelectedFile().getAbsolutePath());
                try
                {
                    fileIn= new Scanner(file);
                    if(file.isFile())
                    {
                        while(fileIn.hasNextLine())
                        {
                            String line= fileIn.nextLine()+" ";
                            textArea.append(line);
                        }
                    }
                }
                catch (FileNotFoundException ex)
                {
                    ex.printStackTrace();
                }
                finally
                {
                    fileIn.close();
                }
            }
        }

        if(e.getSource()==saveItem)
        {
            JFileChooser filechoix= new JFileChooser();
            filechoix.setCurrentDirectory(new File("."));
            int response= filechoix.showSaveDialog(null);

            if(response==JFileChooser.APPROVE_OPTION)
            {
                File file;
                PrintWriter fileOut=null;
                file= new File(filechoix.getSelectedFile().getAbsolutePath());

                try
                {
                    fileOut= new PrintWriter(file);
                    fileOut.println(textArea.getText());
                }
                catch (FileNotFoundException ex)
                {
                    throw new RuntimeException(ex);
                }
                finally
                {
                    fileOut.close();
                }
            }
        }
        if(e.getSource()==exitItem)
        {
            System.exit(0);
        }
    }
}

